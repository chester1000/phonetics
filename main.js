// Generated by CoffeeScript 1.9.3
(function() {
  var DEFAULT_THEME;

  DEFAULT_THEME = 'blue-grey';

  angular.module('phoneticsApp', ['ngMaterial', 'angularRipple']).config(function($sceDelegateProvider, $locationProvider, $mdThemingProvider) {
    var j, len, results1, t, themes;
    $sceDelegateProvider.resourceUrlWhitelist(['self', 'http://files.parsetfss.com/**']);
    $locationProvider.html5Mode(true);
    $mdThemingProvider.alwaysWatchTheme(true);
    themes = [
      {
        primary: DEFAULT_THEME,
        accent: 'pink'
      }, {
        primary: 'light-green',
        accent: 'pink'
      }, {
        primary: 'light-blue',
        accent: 'orange'
      }, {
        primary: 'amber',
        accent: 'blue'
      }, {
        primary: 'teal',
        accent: 'deep-purple'
      }, {
        primary: 'red',
        accent: 'green'
      }
    ];
    results1 = [];
    for (j = 0, len = themes.length; j < len; j++) {
      t = themes[j];
      results1.push($mdThemingProvider.theme(t.primary).primaryPalette(t.primary).accentPalette(t.accent));
    }
    return results1;
  }).factory('ParseServ', function(utils) {
    var Langs, Sounds;
    Parse.initialize('BdvYraypXe3U33UV5mGBRgPmqC2xUyPoP54QgkML', 'kY4MCB6NyGtXjEY6TeAtFWr1zhLv377L3HIiBbas');
    Langs = Parse.Object.extend('Languages');
    Sounds = Parse.Object.extend('Sounds');
    this.getLangs = function(cb) {
      var query;
      query = new Parse.Query(Langs);
      return query.find({
        success: function(results) {
          return cb(null, results.map(function(r) {
            var palette;
            palette = r.get('palette');
            return {
              id: r.id,
              name: r.get('name'),
              originalName: r.get('originalName'),
              code: r.get('code'),
              toggleLabel: r.get('toggleLabel'),
              palette: palette,
              color: utils.getColor(palette, 'A200')
            };
          }));
        },
        error: function(err) {
          return cb(err, []);
        }
      });
    };
    this.getSounds = function(langId, cb) {
      var query;
      query = new Parse.Query(Sounds);
      query.equalTo('language', langId);
      return query.find({
        success: function(results) {
          return cb(null, results.map(function(r) {
            var sound, soundName, soundNameUrl, soundUrl;
            sound = r.get('sound');
            soundUrl = sound != null ? sound.url() : void 0;
            soundName = r.get('soundName');
            soundNameUrl = soundName != null ? soundName.url() : void 0;
            return {
              name: r.get('name'),
              altNames: r.get('altNames'),
              sound: soundUrl,
              soundName: soundNameUrl
            };
          }));
        },
        error: function(err) {
          return cb(err, []);
        }
      });
    };
    return this;
  }).factory('panels', function() {
    var Panels;
    return new (Panels = (function() {
      var _changeListeners, _defaultHeight;

      _changeListeners = [];

      _defaultHeight = 0;

      Panels.prototype.current = 0;

      Panels.prototype.panels = [];

      function Panels() {}

      Panels.prototype.init = function(panels1) {
        this.panels = panels1;
        this.panels.unshift({
          name: 'langs',
          toggle: false,
          height: _defaultHeight
        });
        return this.panels.push({
          name: 'about',
          toggle: false,
          height: _defaultHeight
        });
      };

      Panels.prototype.setDefaultHeight = function(defaultHeight) {
        return _defaultHeight = defaultHeight;
      };

      Panels.prototype.setHeight = function(name, height) {
        var j, len, ref, results1, s;
        ref = this.panels;
        results1 = [];
        for (j = 0, len = ref.length; j < len; j++) {
          s = ref[j];
          if (s.name === name) {
            results1.push(s.height = height);
          }
        }
        return results1;
      };

      Panels.prototype.getCurrent = function() {
        return this.current;
      };

      Panels.prototype.setCurrent = function(newCurrent) {
        var cb, j, len, results1;
        if (this.panels.length > 0 && newCurrent !== this.current) {
          this.current = newCurrent;
          results1 = [];
          for (j = 0, len = _changeListeners.length; j < len; j++) {
            cb = _changeListeners[j];
            results1.push(cb(this.current, this.getInfo(this.current).toggle));
          }
          return results1;
        }
      };

      Panels.prototype.getInfo = function(panelId) {
        return this.panels[panelId];
      };

      Panels.prototype.getBreakPoints = function() {
        return this.panels.reduce((function(p, c, i) {
          p.push(c.height + p[i]);
          return p;
        }), [0]);
      };

      Panels.prototype.getCurrentLang = function() {
        var ref;
        if ((ref = this.panels[this.current].name) === 'langs' || ref === 'about') {
          return null;
        }
        return this.current - 1;
      };

      Panels.prototype.getCurrentLabel = function(state) {
        var ref, tmpLabels;
        if (this.panels.length === 0) {
          return "loading...";
        }
        tmpLabels = (ref = this.getInfo(this.current)) != null ? ref.labels : void 0;
        switch (true) {
          case !tmpLabels:
            return null;
          case tmpLabels.length === 1:
            return tmpLabels[0];
          default:
            return tmpLabels[+state];
        }
      };

      Panels.prototype.cacheToggleStatus = function(state) {
        return this.getInfo(this.current).toggle = state;
      };

      Panels.prototype.getAll = function() {
        return this.panels;
      };

      Panels.prototype.getLastId = function() {
        var i, j, len, ref, v;
        ref = this.panels;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          v = ref[i];
          if (v.name === 'about') {
            return i;
          }
        }
      };

      Panels.prototype.onChange = function(callback) {
        return _changeListeners.push(callback);
      };

      return Panels;

    })());
  }).factory('measurer', function($window, panels) {
    var Measurer;
    return new (Measurer = (function() {
      function Measurer() {
        panels.setDefaultHeight(this.getViewPortHeight());
      }

      Measurer.prototype.getToolbarHeight = function() {
        return 64;
      };

      Measurer.prototype.getWindowHeight = function() {
        return $window.innerHeight;
      };

      Measurer.prototype.getViewPortHeight = function() {
        return this.getWindowHeight() - this.getToolbarHeight();
      };

      Measurer.prototype.getCurrentPanelInfo = function() {
        var _guessedPanel, b, bottom, breakpoints, i, j, len, screenMiddle, scrollToPoint, top;
        _guessedPanel = null;
        scrollToPoint = false;
        top = $window.scrollY;
        bottom = top + this.getViewPortHeight();
        breakpoints = panels.getBreakPoints();
        for (i = j = 0, len = breakpoints.length; j < len; i = ++j) {
          b = breakpoints[i];
          if (i + 1 < breakpoints.length) {
            if (top >= b && bottom <= breakpoints[i + 1]) {
              _guessedPanel = i;
              break;
            } else if (top < b && bottom > b) {
              screenMiddle = top + this.getViewPortHeight() / 2;
              if (screenMiddle < b) {
                _guessedPanel = i - 1;
                scrollToPoint = breakpoints[_guessedPanel];
                if (panels.getInfo(i - 1).height > this.getViewPortHeight()) {
                  scrollToPoint = breakpoints[i] - this.getViewPortHeight();
                }
              } else if (screenMiddle >= b) {
                _guessedPanel = i;
                scrollToPoint = breakpoints[i];
              }
              break;
            }
          }
        }
        if (_guessedPanel !== null) {
          panels.setCurrent(_guessedPanel);
        }
        return scrollToPoint;
      };

      return Measurer;

    })());
  }).controller('LangCtrl', function($scope, $rootScope, ParseServ, panels, utils) {
    var setStuff;
    $scope.toggleStatus = false;
    $scope.notifyChange = function() {
      return panels.cacheToggleStatus($scope.toggleStatus);
    };
    $scope.getToggleLabel = function() {
      return panels.getCurrentLabel($scope.toggleStatus);
    };
    setStuff = function(theme, title) {
      $scope.title = title;
      $scope.dynamicTheme = theme;
      return $rootScope.currentThemeColor = utils.getColor(theme);
    };
    setStuff(DEFAULT_THEME);
    panels.onChange(function(newGridIdx, toggleStatus) {
      var c;
      $scope.toggleStatus = toggleStatus;
      switch (newGridIdx) {
        case 0:
          setStuff(DEFAULT_THEME);
          break;
        case panels.getLastId():
          setStuff(DEFAULT_THEME, ' ');
          break;
        default:
          c = $scope.langs[newGridIdx - 1];
          setStuff(c.palette, c.name);
      }
      return $scope.$apply();
    });
    return ParseServ.getLangs(function(err, langs) {
      panels.init(langs.map(function(l) {
        return {
          name: l.code,
          toggle: false,
          labels: l.toggleLabel
        };
      }));
      $scope.langs = langs;
      return $scope.$apply();
    });
  }).controller('SoundBoardCtrl', function($scope, ParseServ, utils) {
    var lang;
    $scope.normalizedSoundName = function(sound) {
      return utils.normalize(sound.name);
    };
    $scope.toggleFilter = function(sound) {
      var ref;
      if (((ref = $scope.lang) != null ? ref.code : void 0) === 'pl') {
        return $scope.toggleStatus || sound.name.length === 1;
      }
      return true;
    };
    $scope.getSoundLabel = function(name, altName) {
      var ref;
      if (((ref = $scope.lang) != null ? ref.code : void 0) === 'bopo') {
        if (!$scope.toggleStatus) {
          return name;
        } else {
          return altName;
        }
      }
      return name;
    };
    lang = new Parse.Object('Languages');
    lang.id = $scope.lang.id;
    return ParseServ.getSounds(lang, function(err, sounds) {
      $scope.sounds = sounds;
      return $scope.$apply();
    });
  }).directive('aSound', function() {
    return {
      restrict: 'A',
      link: function(scope, element, attr) {
        var player;
        scope.playing = false;
        player = element.find('audio')[0];
        return element.on('click', function() {
          scope.playing = true;
          player.currentTime = 0;
          player.play();
          return player.addEventListener('ended', function() {
            scope.playing = false;
            return scope.$apply();
          });
        });
      }
    };
  }).directive('aPanel', function($window, $timeout, utils, measurer, panels) {
    return {
      restrict: 'A',
      link: function(scope, el, attr) {
        var calculateHeight;
        calculateHeight = function() {
          var clientHeight, idx, minHeight, ref, ref1;
          clientHeight = ((ref = el.find('md-grid-list')[0]) != null ? ref : el[0]).clientHeight;
          minHeight = Math.max(measurer.getViewPortHeight(), clientHeight);
          if (attr.lastHeight !== minHeight) {
            attr.$set('lastHeight', minHeight);
            idx = (ref1 = scope.lang) != null ? ref1.code : void 0;
            if (!idx && scope.langs) {
              idx = 'langs';
            }
            if (idx == null) {
              idx = 'about';
            }
            panels.setHeight(idx, minHeight);
            el.css('min-height', minHeight + 'px');
            $window.scrollBy(0, 1);
          }
        };
        scope.setMinHeight = calculateHeight;
        angular.element($window).bind('resize', utils.debounce(100, calculateHeight));
        return $timeout(calculateHeight);
      }
    };
  }).directive('snap', function($window, utils, measurer) {
    return function(scope, element, attrs) {
      var debouncedScroll;
      debouncedScroll = utils.debounce(100, function() {
        var scrollToPoint;
        scrollToPoint = measurer.getCurrentPanelInfo();
        if (scrollToPoint !== false) {
          return utils.scrollTo(scrollToPoint, 200, utils.easingFunctions.easeInOutQuint);
        }
      });
      return angular.element($window).bind('scroll', function() {
        measurer.getCurrentPanelInfo();
        return debouncedScroll();
      });
    };
  }).directive('preventPopups', function() {
    return function(scope, element, attr) {
      return element.bind('contextmenu', function(e) {
        return scope.$apply(function() {
          return e.preventDefault();
        });
      });
    };
  });

}).call(this);

//# sourceMappingURL=main.js.map
