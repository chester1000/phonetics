// Generated by CoffeeScript 1.9.3
(function() {
  var Langs, Sounds, debounce, normalize;

  Parse.initialize('BdvYraypXe3U33UV5mGBRgPmqC2xUyPoP54QgkML', 'kY4MCB6NyGtXjEY6TeAtFWr1zhLv377L3HIiBbas');

  Langs = Parse.Object.extend('Languages');

  Sounds = Parse.Object.extend('Sounds');

  angular.module('phoneticsApp', []).filter('soundName', function() {
    return function(input) {
      return input.toUpperCase() + input.toLowerCase();
    };
  }).config(function($sceDelegateProvider) {
    return $sceDelegateProvider.resourceUrlWhitelist(['self', 'http://files.parsetfss.com/**']);
  }).service('ParseServ', function() {
    this.getLangs = function(cb) {
      var query;
      query = new Parse.Query(Langs);
      return query.find({
        success: function(results) {
          return cb(null, results.map(function(r) {
            return {
              id: r.id,
              name: r.get('name'),
              originalName: r.get('originalName'),
              code: r.get('code'),
              color: r.get('color')
            };
          }));
        },
        error: function(err) {
          return cb(err, []);
        }
      });
    };
    this.getSounds = function(langId, cb) {
      var query;
      query = new Parse.Query(Sounds);
      query.equalTo('language', langId);
      return query.find({
        success: function(results) {
          return cb(null, results.map(function(r) {
            var sound, soundName, soundNameUrl, soundUrl;
            sound = r.get('sound');
            soundUrl = sound != null ? sound.url() : void 0;
            soundName = r.get('soundName');
            soundNameUrl = soundName != null ? soundName.url() : void 0;
            return {
              name: r.get('name'),
              altNames: r.get('altNames'),
              sound: soundUrl,
              soundName: soundNameUrl
            };
          }));
        },
        error: function(err) {
          return cb(err, []);
        }
      });
    };
    return this;
  }).controller('LangCtrl', function($scope, ParseServ) {
    $scope.title = "Choose a language";
    $scope.soundsType = "sound";
    return ParseServ.getLangs(function(err, langs) {
      $scope.langs = langs;
      return $scope.$apply();
    });
  }).controller('SoundBoardCtrl', function($scope, ParseServ) {
    var lang;
    $scope.normalizedSoundName = function(sound) {
      return normalize(sound.name);
    };
    lang = new Parse.Object('Languages');
    lang.id = $scope.lang.id;
    return ParseServ.getSounds(lang, function(err, sounds) {
      $scope.sounds = sounds;
      return $scope.$apply();
    });
  }).directive('aSound', function() {
    return {
      restrict: 'A',
      link: function(scope, element, attr) {
        var player;
        console.log(scope.name);
        player = element.find('audio')[0];
        return element.on('click', function() {
          player.currentTime = 0;
          return player.play();
        });
      }
    };
  });

  debounce = function(func, threshold, execAsap) {
    var debounced, timeout;
    timeout = void 0;
    return debounced = function() {
      var args, delayed, obj;
      obj = this;
      args = arguments;
      delayed = function() {
        if (!execAsap) {
          func.apply(obj, args);
        }
        return timeout = null;
      };
      if (timeout) {
        clearTimeout(timeout);
      } else if (execAsap) {
        func.apply(obj, args);
      }
      return timeout = setTimeout(delayed, threshold || 100);
    };
  };

  normalize = function(letter) {
    if (letter == null) {
      letter = '';
    }
    letter = letter.toLowerCase().replace(/\\s/g, '').replace(/[àáâãäåą]/g, 'a').replace(/æ/g, 'ae').replace(/[çć]/g, 'c').replace(/[èéêëę]/g, 'e').replace(/[ìíîï]/g, 'i').replace(/ł/g, 'l').replace(/ñń/g, 'n').replace(/[òóôõöó]/g, 'o').replace(/ś/g, 's').replace(/œ/g, 'oe').replace(/[ùúûü]/g, 'u').replace(/[ýÿ]/g, 'y').replace(/[żź]/g, 'z').replace(/\\W/g, '');
    return letter + '.';
  };

}).call(this);
